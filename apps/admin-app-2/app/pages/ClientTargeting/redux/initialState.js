import moment from 'moment';

import {
  DEFAULT_CALCULATION_TYPE,
  DEFAULT_COUNT_TYPE,
  SEGMENT_KEYS,
  DEFAULT_CANCELLATION_TYPE,
  GETIR_JOBS_DATE_TYPES,
  DEFAULT_CARBOY_PURCHASE_FREQUENCY_COUNT_TYPE,
  NEW_NOTIF_DETAIL_MAX_DATE_RANGE_DAY,
  GETIR_JOBS_DATE_TYPES_FOR_USER_DETAIL,
  GETIR_LOCALS_STORE_CALCULATION_TYPES,
  ETA_FIELDS,
} from '../constants';
import { NOTIF_FILTER_TYPE } from '../components/GetirGeneralDetail/NotifDetailNew/constants';
import { GETIR_SELECT_MEMBERSHIP_DATE_TYPES } from '@shared/shared/constants';

export const startDate = moment('2015-07-09').startOf('day').toISOString();
export const visitorAndTabOpenDetail = moment('2021-01-01').startOf('day').toISOString();
export const foodReleaseDate = moment('2019-02-01').startOf('day').toISOString();
export const getirSelectReleaseDate = moment('2023-01-18').startOf('day').toISOString();
export const marketOrderCETAReleaseDate = moment('2024-02-01').startOf('day').toISOString();
export const getEndDate = () => moment().toISOString();
const startDateType = 'static';
const endDateType = 'static';

export const NON_TEMPLATE_FIELDS = new Set([
  'general',
  'getFoodPromosBySearchCode',
  'getCuisines',
  'getGwmpBrands',
  'getGwmpVendors',
  'getPersonaClientFlags',
  'getRFMSegments',
  'lastCollapseTriggeredKey',
  'dataScienceModels',
  'personaDomainTypes',
  'getArtisanTypes',
  'getArtisanChainShops',
  'getGetirJobsPostTypes',
  'getLocalsPromosBySearchCode',
  'getMarketPromosBySearchCode',
  'getFilteredGetirDriveVouchers',
  'getGetirJobsCategories',
  'getGetirJobsDrivingLicenses',
  'getFilteredBrands',
  'getirMarketOrderCancelReasons',
]);

export const STATE_SKELETON = {
  data: [],
  isPending: false,
  error: null,
};

export const INITIAL_STATE = {
  createClientList: { isPending: false },
  getFoodPromosBySearchCode: {
    isPending: false,
    data: [],
    error: null,
  },
  getLocalsPromosBySearchCode: {
    isPending: false,
    data: [],
    error: null,
  },
  getMarketPromosBySearchCode: {
    isPending: false,
    data: [],
    error: null,
  },
  getCuisines: {
    data: [],
    isPending: false,
    error: null,
  },
  getRFMSegments: {
    data: [],
    isPending: true,
  },
  getGwmpBrands: {
    data: [],
    isPending: false,
    error: null,
  },
  getGwmpVendors: {
    data: [],
    isPending: false,
    error: null,
  },
  getPersonaClientFlags: {
    data: [],
    isPending: false,
    error: null,
  },
  getArtisanTypes: {
    data: [],
    isPending: false,
    error: null,
  },
  getArtisanChainShops: {
    data: [],
    isPending: false,
    error: null,
  },
  getGetirJobsPostTypes: {
    data: [],
    isPending: false,
  },
  getGetirJobsDrivingLicenses: {
    data: [],
    isPending: false,
  },
  getFilteredGetirDriveVouchers: {
    isPending: false,
    data: [],
    error: null,
  },
  getFilteredBrands: {
    isPending: false,
    data: [],
    error: null,
  },
  lastCollapseTriggeredKey: '',
  dataScienceModels: {},
  personaDomainTypes: {},
  getirMarketOrderCancelReasons: {
    isPending: false,
    data: [],
  },
  general: {
    listName: '',
    maxClientCount: '',
    sortBy: 1,
    removeDuplicateEmailClients: false,
    isOnlyRegisteredClients: false,
    isOnlyEmailVerifiedClients: false,
    isNotifAllowed: true,
    isEmailAllowed: true,
    isSMSAllowed: true,
    isPhoneCallAllowed: true,
    bringClientId: false,
    bringEmail: true,
    bringGSM: true,
    bringIDFA: false,
    abuseSegmentIds: SEGMENT_KEYS.SUSPICIOUS,
  },
  getir: {
    abTestDetail: {
      template: () => ({
        filteringType: null,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        excludeClients: true,
        abTestCodes: [],
        getABTestCodes: {
          data: [],
          isPending: true,
          error: null,
        },
        dataABTestCodes: {
          data: [],
          isPending: true,
          error: null,
        },
        ignoreCountry: true,
      }),
    },
    visitor: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: visitorAndTabOpenDetail,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    lastLocation: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        inOnlyCoverage: true,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    lastOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        warehouseType: null,
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    allDomainsLastOrder: {
      template: () => ({
        cities: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        calculationType: DEFAULT_CALCULATION_TYPE,
        domainTypes: [],
      }),
    },
    firstOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        warehouseType: null,
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    maxOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        topXOrderType: null,
        calculationType: null,
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
    totalOrder: {
      template: () => ({
        minOrderCount: 1,
        maxOrderCount: null,
        domainTypes: [],
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        shops: [],
        chainId: null,
        artisanType: null,
        getShops: {
          data: [],
          isPending: true,
          error: null,
        },
        chainRestaurants: [],
        restaurants: [],
        importedRestaurants: [],
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    orderRating: {
      template: () => ({
        domainTypes: [],
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        shops: [],
        getShops: {
          data: [],
          isPending: true,
          error: null,
        },
        chainRestaurants: [],
        restaurants: [],
        importedRestaurants: [],
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        orderRate: null,
        topXOrderType: null,
        calculationType: DEFAULT_CALCULATION_TYPE,
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
    notOrdered: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        domainTypes: [],
        warehouses: [],
        warehouseType: null,
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        shops: [],
        chainId: null,
        artisanType: null,
        getShops: {
          data: [],
          isPending: true,
          error: null,
        },
        chainRestaurants: [],
        restaurants: [],
        importedRestaurants: [],
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    boughtProduct: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        domainTypes: [],
        products: [],
        selectableProducts: [],
        category: null,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        selectableSubCategories: [],
        subCategories: [],
        supplier: null,
        manufacturer: null,
        selectedCountMinValue: null,
        selectedCountMaxValue: null,
        selectedCountType: DEFAULT_COUNT_TYPE,
      }),
    },
    orderProduct: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        domainTypes: [],
        products: [],
        selectableProducts: [],
        categories: [],
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        selectableSubCategories: [],
        subCategories: [],
        suppliers: [],
        manufacturers: [],
        brands: [],
        selectedCountMinValue: 0,
        selectedCountMaxValue: null,
        selectedCountType: DEFAULT_COUNT_TYPE,
        basketDetailType: null,
      }),
    },
    nonBoughtProduct: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        domainTypes: [],
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        products: [],
        category: null,
        selectableSubCategories: [],
        subCategories: [],
        selectableProducts: [],
        supplier: null,
        manufacturer: null,
      }),
    },
    notif: {
      template: () => ({
        notifFilterType: NOTIF_FILTER_TYPE.removeSentToday,
        startDateType,
        startDate: moment(getEndDate()).subtract(NEW_NOTIF_DETAIL_MAX_DATE_RANGE_DAY, 'days'),
        startDayBeforeToday: 0,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        excludedNotifs: [],
        includedNotifs: [],
        notificationSource: null,
        notificationDomainType: null,
        excludeClients: false,
        minNotifCount: 0,
        maxNotifCount: 0,
      }),
    },
    promoUsage: {
      template: () => ({
        usedPromos: [],
        excludeClients: false,
        isGetirMarketPromo: true,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        promoObjective: [],
      }),
    },
    includedClientSegment: { template: () => ({ segments: [] }) },
    excludedClientSegment: { template: () => ({ segments: [] }) },
    buildNumber: {
      template: () => ({
        maxAndroidBuildNumber: null,
        maxIOSBuildNumber: null,
        minAndroidBuildNumber: 0,
        minIOSBuildNumber: 0,
      }),
    },
    baseUserClient: {
      template: () => ({
        maxValue: null,
        minValue: 0,
        scoreType: 'minMaxValue',
      }),
    },
    earlyChurn: {
      template: () => ({
        maxValue: null,
        minValue: 0,
      }),
    },
    productPriceDetails: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        domainTypes: [],
        selectableWarehouses: [],
        selectableSubCategories: [],
        financialType: '',
        manufacturer: null,
        maxDate: null,
        minDate: null,
        selectableProducts: [],
        products: [],
        category: null,
        subCategories: [],
        supplier: null,
        valueType: '',
        warehouses: [],
        minValue: 0,
        maxValue: null,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    orderPrice: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        domainTypes: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        minValue: 0,
        maxValue: null,
        financialType: '',
        valueType: '',
        shops: [],
        chainId: null,
        artisanType: null,
        getShops: {
          data: [],
          isPending: true,
          error: null,
        },
        topXOrderType: null,
        calculationType: null,
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
    dayDifferenceBetweenOrders: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        domainTypes: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        minDayValue: 0,
        maxDayValue: null,
        topXOrderType: null,
        calculationType: null,
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
    paymentMethods: {
      template: () => ({
        minTransactionCount: 0,
        maxTransactionCount: 0,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    purchaseFrequency: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        domainTypes: [],
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        minOrderCount: 0,
        maxOrderCount: null,
        shops: [],
        chainId: null,
        artisanType: null,
        getShops: {
          data: [],
          isPending: true,
          error: null,
        },
        chainRestaurants: [],
        restaurants: [],
        importedRestaurants: [],
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    clientDownloadDate: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    signedUp: {
      template: () => ({
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    deviceSpesification: {
      template: () => ({
        appLanguage: [],
        deviceTypes: [],
        // minDevicePrice: 0,
        // maxDevicePrice: null,
      }),
    },
    gsmCountryCodeDetail: {
      template: () => ({
        gsmCountryCode: [],
        includeClients: true,
      }),
    },
    communicationPreferencesDetail: {
      template: () => ({
        allowedCommunicationType: [],
        notAllowedCommunicationType: [],
      }),
    },
    dataScience: {
      template: () => ({
        selectedDomainType: null,
        modelId: null,
      }),
    },
    lateDeliveryDurationETA: {
      template: () => ({
        startDateType,
        startDayBeforeToday: 0,
        startDate: marketOrderCETAReleaseDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        etaType: ETA_FIELDS.CETA,
        domainType: null,
        cities: [],
        warehouses: [],
        selectableWarehouses: [],
        geoJson: null,
        minReachDurationTime: 0,
        maxReachDurationTime: null,
        topXOrderType: null,
        minOrderCount: 0,
        maxOrderCount: null,
        excludeQueueUsers: false,
        excludeScheduledOrders: true,
        minLateDurationTime: 0,
        maxLateDurationTime: null,
      }),
    },
    orderFeedback: {
      template: () => ({
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        domainTypes: [],
        cities: [],
        warehouses: [],
        selectableWarehouses: [],
        geoJson: null,
        minReachDurationTime: 0,
        maxReachDurationTime: null,
        minOrderCount: 0,
        maxOrderCount: null,
        mainReasons: [],
        subReasons: [],
        selectableSubReasons: [],
      }),
    },
  },
  getir10: {
    visitor: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: visitorAndTabOpenDetail,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    lastOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    firstOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    maxOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    missedOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
    totalOrder: {
      template: () => ({
        minOrderCount: 1,
        maxOrderCount: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
      }),
    },
    forcedTabOpen: {
      template: () => ({
        minTabOpenCount: 0,
        maxTabOpenCount: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
      }),
    },
    includedRFTMSegment: {
      template: () => ({
        maxFValue: null,
        maxHValue: null,
        maxMValue: null,
        maxRValue: null,
        maxTValue: null,
        minFValue: 0,
        minHValue: 0,
        minMValue: 0,
        minRValue: 0,
        minTValue: 0,
        segments: [],
      }),
    },
    excludedRFTMSegment: {
      template: () => ({
        maxFValue: null,
        maxHValue: null,
        maxMValue: null,
        maxRValue: null,
        maxTValue: null,
        minFValue: 0,
        minHValue: 0,
        minMValue: 0,
        minRValue: 0,
        minTValue: 0,
        segments: [],
      }),
    },
    personaDetail: {
      template: () => ({
        personas: [],
        minHabitRankValue: null,
        maxHabitRankValue: null,
        minTimeSpecificRankValue: null,
        maxTimeSpecificRankValue: null,
        minWeekendOrderRatioValue: null,
        maxWeekendOrderRatioValue: null,
        minOrganicRankValue: null,
        maxOrganicRankValue: null,
        minGetirFinancedPromoRatioValue: null,
        maxGetirFinancedPromoRatioValue: null,
        minBasketDurationRankValue: null,
        maxBasketDurationRankValue: null,
        minCategoryRankValue: null,
        maxCategoryRankValue: null,
        minPremiumRankValue: null,
        maxPremiumRankValue: null,
        flags: [],
      }),
    },
    customerLTV: {
      template: () => ({
        maxValue: 0,
        minValue: 0,
      }),
    },
    deliveryDuration: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        isETAExceeded: false,
        minDurationTime: 0,
        maxDurationTime: null,
        excludeQueueUsers: false,
        topXOrderType: null,
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
    cancelled: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        cancellationType: DEFAULT_CANCELLATION_TYPE,
        topXOrderType: null,
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
  },
  getir30: {
    visitor: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: visitorAndTabOpenDetail,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    lastOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    firstOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    maxOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    missedOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
    totalOrder: {
      template: () => ({
        minOrderCount: 1,
        maxOrderCount: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
      }),
    },
    forcedTabOpen: {
      template: () => ({
        minTabOpenCount: 0,
        maxTabOpenCount: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
      }),
    },
    includedRFTMSegment: {
      template: () => ({
        maxFValue: null,
        maxHValue: null,
        maxMValue: null,
        maxRValue: null,
        maxTValue: null,
        minFValue: 0,
        minHValue: 0,
        minMValue: 0,
        minRValue: 0,
        minTValue: 0,
        segments: [],
      }),
    },
    excludedRFTMSegment: {
      template: () => ({
        maxFValue: null,
        maxHValue: null,
        maxMValue: null,
        maxRValue: null,
        maxTValue: null,
        minFValue: 0,
        minHValue: 0,
        minMValue: 0,
        minRValue: 0,
        minTValue: 0,
        segments: [],
      }),
    },
    deliveryDuration: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        isETAExceeded: false,
        minDurationTime: 0,
        maxDurationTime: null,
        excludeQueueUsers: false,
        topXOrderType: null,
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
    cancelled: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        cancellationType: DEFAULT_CANCELLATION_TYPE,
        topXOrderType: null,
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
  },
  getirVoyager: {
    visitor: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    lastOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    firstOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        warehouseType: null,
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    maxOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    missedOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
    totalOrder: {
      template: () => ({
        minOrderCount: 1,
        maxOrderCount: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    forcedTabOpen: {
      template: () => ({
        minTabOpenCount: 0,
        maxTabOpenCount: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
      }),
    },
    carboyPurchaseFrequency: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        warehouseType: null,
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        selectedCountMinValue: null,
        selectedCountMaxValue: null,
        selectedCountType: DEFAULT_COUNT_TYPE,
      }),
    },
    deliveryDuration: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        isETAExceeded: false,
        minDurationTime: 0,
        maxDurationTime: null,
        excludeQueueUsers: false,
        topXOrderType: null,
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
    cancelled: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        cancellationType: DEFAULT_CANCELLATION_TYPE,
        topXOrderType: null,
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
  },
  getirFood: {
    visitor: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        chainRestaurants: [],
        restaurants: [],
        importedRestaurants: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: visitorAndTabOpenDetail,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        isChainSelected: false,
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    lastVisitor: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        chainRestaurants: [],
        restaurants: [],
        importedRestaurants: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: visitorAndTabOpenDetail,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        isChainSelected: false,
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    lastOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        chainRestaurants: [],
        restaurants: [],
        importedRestaurants: [],
        maxValue: null,
        minValue: 0,
        startDateType,
        startDayBeforeToday: 0,
        startDate: foodReleaseDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        isChainSelected: false,
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
        calculationType: DEFAULT_CALCULATION_TYPE,
        getirDelivery: false,
        restaurantDelivery: false,
      }),
    },
    firstOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        chainRestaurants: [],
        restaurants: [],
        importedRestaurants: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: foodReleaseDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        isChainSelected: false,
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    missedOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        chainRestaurants: [],
        restaurants: [],
        importedRestaurants: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: foodReleaseDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        minOrderCount: 0,
        maxOrderCount: null,
        isChainSelected: false,
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    totalOrder: {
      template: () => ({
        minOrderCount: 1,
        maxOrderCount: null,
        cities: [],
        ignoreCountry: false,
        chainRestaurants: [],
        restaurants: [],
        importedRestaurants: [],
        isChainSelected: false,
        cuisines: [],
        getirDelivery: false,
        restaurantDelivery: false,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    forcedTabOpen: {
      template: () => ({
        minTabOpenCount: 0,
        maxTabOpenCount: null,
        cities: [],
        ignoreCountry: false,
        chainRestaurants: [],
        restaurants: [],
        importedRestaurants: [],
        isChainSelected: false,
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    excludedFoodProduct: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        chainRestaurants: [],
        products: [],
        restaurant: '',
        startDateType,
        startDayBeforeToday: 0,
        startDate: foodReleaseDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        isChainSelected: false,
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getRestaurantProducts: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    excludedOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        cuisines: [],
        restaurant: null,
        chainRestaurants: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: foodReleaseDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        isChainSelected: false,
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    foodProduct: {
      template: () => ({
        minOrderCount: 0,
        maxOrderCount: null,
        cities: [],
        ignoreCountry: false,
        chainRestaurants: [],
        products: [],
        restaurant: '',
        startDateType,
        startDayBeforeToday: 0,
        startDate: foodReleaseDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        isChainSelected: false,
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getRestaurantProducts: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    cancelled: {
      template: () => ({
        maxValue: null,
        minValue: 0,
        cities: [],
        ignoreCountry: false,
        chainRestaurants: [],
        restaurants: [],
        importedRestaurants: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: foodReleaseDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        isChainSelected: false,
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
        topXOrderType: null,
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
    behaviorRFTMSegment: {
      template: () => ({
        maxFValue: null,
        maxHValue: null,
        maxMValue: null,
        maxRValue: null,
        maxTValue: null,
        minFValue: 0,
        minHValue: 0,
        minMValue: 0,
        minRValue: 0,
        minTValue: 0,
        segments: [],
      }),
    },
    includedClientSegment: { template: () => ({ segments: [] }) },
    loyaltyOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        chainRestaurants: [],
        restaurants: [],
        importedRestaurants: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: foodReleaseDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        minOrderCount: 0,
        maxOrderCount: null,
        isChainSelected: false,
        getRestaurantsByName: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurants: {
          data: [],
          isPending: true,
          error: null,
        },
        getChainRestaurantBranches: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    loyalty: {
      template: () => ({
        minStampOrderCount: 0,
        maxStampOrderCount: null,
        minFreeOrderCount: 0,
        maxFreeOrderCount: null,
        minLastOrderDayDiff: 0,
        maxLastOrderDayDiff: null,
        minCycle: 0,
        maxCycle: null,
      }),
    },
    promoUsage: {
      template: () => ({
        usedPromos: [],
        excludeClients: false,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        promoObjective: [],
      }),
    },
  },
  getirBitaksi: {
    visitor: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        startDateType,
        startDayBeforeToday: 0,
        startDate: visitorAndTabOpenDetail,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    lastOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        geoJson: null,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    firstOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        geoJson: null,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    callFrequency: {
      template: () => ({
        cities: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        minCallCount: 0,
        maxCallCount: null,
      }),
    },
    maxOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    // missedOrder: {
    //   template: () => ({
    //     cities: [],
    //     ignoreCountry: false,
    //     geoJson: null,
    //     startDateType,
    //     startDayBeforeToday: 0,
    //     startDate,
    //     endDateType,
    //     endDayBeforeToday: 0,
    //     endDate: getEndDate(),
    //     minOrderCount: 0,
    //     maxOrderCount: null,
    //   }),
    // },
    totalOrder: {
      template: () => ({
        geoJson: null,
        minOrderCount: 0,
        maxOrderCount: null,
        cities: [],
        ignoreCountry: false,
      }),
    },
    forcedTabOpen: {
      template: () => ({
        minTabOpenCount: 0,
        maxTabOpenCount: null,
        geoJson: null,
        cities: [],
        ignoreCountry: false,
      }),
    },
    tripFrequency: {
      template: () => ({
        cities: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        minTripCount: 0,
        maxTripCount: 0,
      }),
    },
    promoUsage: {
      template: () => ({
        usedPromos: [],
        excludeClients: false,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        promoObjective: [],
      }),
    },
  },
  getirLocals: {
    lastOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        shops: [],
        chainId: null,
        artisanType: null,
        getShops: {
          data: [],
          isPending: true,
          error: null,
        },
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    totalOrder: {
      template: () => ({
        storeCalculationDetail: GETIR_LOCALS_STORE_CALCULATION_TYPES.TOTAL_ORDER_COUNT,
        minOrderCount: 1,
        maxOrderCount: null,
        cities: [],
        ignoreCountry: false,
        shops: [],
        artisanType: null,
        chainId: null,
        getShops: {
          data: [],
          isPending: true,
          error: null,
        },
        ignoreChain: false,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    visitor: {
      template: () => ({
        geoJson: null,
        startDateType,
        startDayBeforeToday: 0,
        startDate: visitorAndTabOpenDetail,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        shops: [],
        getShops: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    firstOrder: {
      template: () => ({
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        shops: [],
        chainId: null,
        artisanType: null,
        getShops: {
          data: [],
          isPending: true,
          error: null,
        },
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    missedOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        warehouses: [],
        selectableWarehouses: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        minOrderCount: 0,
        maxOrderCount: null,
        shops: [],
        chainId: null,
        artisanType: null,
        getShops: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    lastVisitor: {
      template: () => ({
        geoJson: null,
        cities: [],
        artisanType: null,
        chainId: null,
        ignoreCountry: false,
        shops: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: visitorAndTabOpenDetail,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        getShops: {
          data: [],
          isPending: true,
          error: null,
        },
      }),
    },
    promoUsage: {
      template: () => ({
        usedPromos: [],
        excludeClients: false,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        promoObjective: [],
      }),
    },
    loyalty: {
      template: () => ({
        minStampOrderCount: 0,
        maxStampOrderCount: null,
        minFreeOrderCount: 0,
        maxFreeOrderCount: null,
        minLastOrderDayDiff: 0,
        maxLastOrderDayDiff: null,
      }),
    },
    loyaltyOrder: {
      template: () => ({
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        shops: [],
        getShops: {
          data: [],
          isPending: true,
          error: null,
        },
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
  },
  getirWaterMarketPlace: {
    visitor: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        geoJson: null,
        brands: [],
        vendors: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: visitorAndTabOpenDetail,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    lastOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        geoJson: null,
        brands: [],
        vendors: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    firstOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        geoJson: null,
        brands: [],
        vendors: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        calculationType: DEFAULT_CALCULATION_TYPE,
      }),
    },
    maxOrder: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        geoJson: null,
        brands: [],
        vendors: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    orderFrequency: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        geoJson: null,
        brands: [],
        vendors: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        minOrderCount: 0,
        maxOrderCount: null,
      }),
    },
    carboyPurchaseFrequency: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        geoJson: null,
        brands: [],
        vendors: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        selectedCountMinValue: 0,
        selectedCountMaxValue: null,
        selectedCountType: DEFAULT_CARBOY_PURCHASE_FREQUENCY_COUNT_TYPE,
      }),
    },
    totalOrder: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        brands: [],
        vendors: [],
        minOrderCount: 1,
        maxOrderCount: null,
      }),
    },
    vendorHexagon: { template: () => ({ vendors: [] }) },
    promoUsage: {
      template: () => ({
        usedPromos: [],
        excludeClients: false,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        promoObjective: [],
      }),
    },
  },
  getirJob: {
    user: {
      template: () => ({
        // cities: [],
        dateType: GETIR_JOBS_DATE_TYPES_FOR_USER_DETAIL.REGISTER.value,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        excludeShadowBannedUser: false,
        profileStatus: [],
        experienceDetails: [],
        drivingLicenses: [],
        minAge: 14,
        maxAge: null,
        excludeUser: false,
        getJobTitlesByFilters: {
          data: [],
          isPending: false,
        },
      }),
    },
    totalPost: {
      template: () => ({
        cities: [],
        dateType: GETIR_JOBS_DATE_TYPES.POST_CREATION_DATE.value,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        employmentType: null,
        jobTitleId: null,
        minPostCount: 0,
        maxPostCount: null,
        postStatus: [],
        deletedStatus: null,
        excludeUser: false,
        postType: null,
        getJobTitlesByFilters: {
          data: [],
          isPending: false,
        },
        sector: [],
      }),
    },
    receivedPost: {
      template: () => ({
        cities: [],
        dateType: GETIR_JOBS_DATE_TYPES.POST_CREATION_DATE.value,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        employmentType: null,
        jobTitleId: null,
        minReceivedPost: 0,
        maxReceivedPost: null,
        ownedPost: false,
        postType: null,
        postStatus: [],
        deletedStatus: null,
        applicationStatus: [],
        excludeUser: false,
        getJobTitlesByFilters: {
          data: [],
          isPending: false,
        },
        sector: [],
      }),
    },
  },
  getirDrive: {
    visitor: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        startDateType,
        startDayBeforeToday: 0,
        startDate: moment('2022-04-26').startOf('day').toISOString(),
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    userDetail: {
      template: () => ({
        minAge: 18,
        maxAge: null,
        kvkk: false,
      }),
    },
    rentalDetail: {
      template: () => ({
        externalSource: [],
        state: [],
        paymentType: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: moment('2018-09-01').startOf('day').toISOString(),
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        minRentCount: 0,
        maxRentCount: null,
        vouchers: [],
      }),
    },
    rfmDetail: {
      template: () => ({
        externalSource: [],
        state: [],
        paymentType: [],
        minRecencyCount: 0,
        maxRecencyCount: null,
        minFrequencyCount: 0,
        maxFrequencyCount: null,
        minMonetaryCount: 0,
        maxMonetaryCount: null,
      }),
    },
    rentDuration: {
      template: () => ({
        state: [],
        paymentType: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: moment('2018-09-01').startOf('day').toISOString(),
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        hourIntervals: [],
        minAverageRentDuration: 0,
        maxAverageRentDuration: null,
        externalSource: [],
      }),
    },
    rentRateInHourInterval: {
      template: () => ({
        state: [],
        paymentType: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: moment('2018-09-01').startOf('day').toISOString(),
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        hourIntervals: [],
        minRentRate: 0,
        maxRentRate: null,
        externalSource: [],
      }),
    },
    rentDistanceTravelled: {
      template: () => ({
        state: [],
        paymentType: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: moment('2018-09-01').startOf('day').toISOString(),
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        hourIntervals: [],
        minAverageDistanceTravelled: 0,
        maxAverageDistanceTravelled: null,
        externalSource: [],
      }),
    },
    membershipDetail: {
      template: () => ({
        dateType: null,
        startDateType,
        startDayBeforeToday: 0,
        startDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        excludeClients: false,
      }),
    },
    favoriteRentStartCity: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        state: [],
        paymentType: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: moment('2018-09-01').startOf('day').toISOString(),
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        hourIntervals: [],
        externalSource: [],
      }),
    },
    favoriteRentEndCity: {
      template: () => ({
        cities: [],
        ignoreCountry: false,
        state: [],
        paymentType: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: moment('2018-09-01').startOf('day').toISOString(),
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        hourIntervals: [],
        externalSource: [],
      }),
    },
    manualTransmissionRate: {
      template: () => ({
        state: [],
        paymentType: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: moment('2018-09-01').startOf('day').toISOString(),
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        hourIntervals: [],
        minManualTransmissionRate: 0,
        maxManualTransmissionRate: null,
        externalSource: [],
      }),
    },
    favoriteDayOfTheWeek: {
      template: () => ({
        state: [],
        paymentType: [],
        startDateType,
        startDayBeforeToday: 0,
        startDate: moment('2018-09-01').startOf('day').toISOString(),
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
        hourIntervals: [],
        favoriteDays: [],
        externalSource: [],
      }),
    },
  },
  getirN11: {
    consentApproval: { template: () => ({ isApproved: false }) },
    visitor: {
      template: () => ({
        geoJson: null,
        cities: [],
        ignoreCountry: false,
        startDateType,
        startDayBeforeToday: 0,
        startDate: visitorAndTabOpenDetail,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
  },
  getirSelect: {
    membershipStatus: { template: () => ({ status: [], excludeUser: false }) },
    membershipDate: {
      template: () => ({
        dateType: GETIR_SELECT_MEMBERSHIP_DATE_TYPES.REGISTER,
        startDateType,
        startDayBeforeToday: 0,
        startDate: getirSelectReleaseDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
    subscriptionPaymentType: { template: () => ({ paymentType: [] }) },
    benefitUsage: {
      template: () => ({
        serviceType: [],
        benefitType: [],
        maxOrderCount: 0,
        minOrderCount: 0,
        startDateType,
        startDayBeforeToday: 0,
        startDate: getirSelectReleaseDate,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
  },
  getirFinance: {
    getirMoneySpendingDetail: {
      template: () => ({
        serviceType: [],
        valueType: '',
        minValue: 0,
        maxValue: null,
        startDateType,
        startDayBeforeToday: 0,
        startDate: visitorAndTabOpenDetail,
        endDateType,
        endDayBeforeToday: 0,
        endDate: getEndDate(),
      }),
    },
  },
  orderFeedbackReasons: {
    data: {},
    isPending: false,
    error: null,
  },
};
